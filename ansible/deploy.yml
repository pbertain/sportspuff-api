---
- name: Deploy SportsPuff API
  hosts: all
  become: yes
  vars:
    deployment_dir: /opt/sportspuff-api
    app_user: ansible
    backup_dir: /opt/sportspuff-api-backups
  
  pre_tasks:
    - name: Set deployment directory based on environment
      set_fact:
        deployment_dir: "{{ '/opt/sportspuff-api' if deployment_env == 'prod' else '/opt/sportspuff-api-dev' }}"
        backup_dir: "{{ '/opt/sportspuff-api-backups' if deployment_env == 'prod' else '/opt/sportspuff-api-dev-backups' }}"
  
  tasks:
    - name: Ensure deployment directory exists
      file:
        path: "{{ deployment_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
    
    - name: Ensure backup directory exists
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
    
    - name: Create timestamp
      set_fact:
        timestamp: "{{ ansible_date_time.epoch }}"
    
    - name: Backup current deployment (if exists)
      shell: |
        if [ -d "{{ deployment_dir }}/sports-data-service" ]; then
          cp -r {{ deployment_dir }}/sports-data-service {{ backup_dir }}/backup-{{ timestamp }}
        fi
      ignore_errors: yes
    
    - name: Clean deployment directory
      file:
        path: "{{ deployment_dir }}/sports-data-service"
        state: absent
    
    - name: Create deployment structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ deployment_dir }}/sports-data-service"
        - "{{ deployment_dir }}/sports-data-service/src"
        - "{{ deployment_dir }}/sports-data-service/src/collectors"
        - "{{ deployment_dir }}/sports-data-service/src/services"
        - "{{ deployment_dir }}/sports-data-service/src/utils"
        - "{{ deployment_dir }}/sports-data-service/scripts"
        - "{{ deployment_dir }}/sports-data-service/systemd"
        - "{{ deployment_dir }}/sports-data-service/alembic"
        - "{{ deployment_dir }}/sports-data-service/alembic/versions"
    
    - name: Copy src directory
      copy:
        src: ../sports-data-service/src
        dest: "{{ deployment_dir }}/sports-data-service/"
        mode: preserve
    
    - name: Copy scripts directory
      copy:
        src: ../sports-data-service/scripts
        dest: "{{ deployment_dir }}/sports-data-service/"
        mode: preserve
    
    - name: Copy systemd directory
      copy:
        src: ../sports-data-service/systemd
        dest: "{{ deployment_dir }}/sports-data-service/"
        mode: preserve
    
    - name: Copy alembic directory
      copy:
        src: ../sports-data-service/alembic
        dest: "{{ deployment_dir }}/sports-data-service/"
        mode: preserve
    
    - name: Copy configuration files
      copy:
        src: "{{ item }}"
        dest: "{{ deployment_dir }}/sports-data-service/"
        mode: preserve
      loop:
        - ../sports-data-service/requirements.txt
        - ../sports-data-service/Dockerfile
        - ../sports-data-service/docker-compose.yml
        - ../sports-data-service/docker-entrypoint.sh
        - ../sports-data-service/alembic.ini
        - ../sports-data-service/init.sql
        - ../sports-data-service/env.example
    
    - name: Create environment file
      template:
        src: templates/env.j2
        dest: "{{ deployment_dir }}/sports-data-service/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
    
    - name: Create environment-specific docker-compose override
      template:
        src: templates/docker-compose.override.yml.j2
        dest: "{{ deployment_dir }}/sports-data-service/docker-compose.override.yml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
    
    - name: Check Docker installation
      command: which docker
      register: docker_which
      changed_when: false
      failed_when: false
    
    - name: Install Docker if not present
      block:
        - name: Update apt cache
          apt:
            update_cache: yes
            cache_valid_time: 3600
        
        - name: Install Docker
          apt:
            name: docker.io
            state: present
        
        - name: Download Docker Compose
          get_url:
            url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
            dest: /usr/local/bin/docker-compose
            mode: '0755'
        
        - name: Start Docker service
          systemd:
            name: docker
            enabled: yes
            state: started
        
        - name: Add ansible user to docker group (Docker just installed)
          user:
            name: ansible
            groups: docker
            append: yes
      when: docker_which.rc != 0
    
    - name: Check if ansible user is in docker group
      shell: groups
      register: ansible_groups
      become: no
      when: docker_which.rc == 0
    
    - name: Add ansible user to docker group if needed (Docker already installed)
      user:
        name: ansible
        groups: docker
        append: yes
      when: 
        - docker_which.rc == 0
        - ansible_groups.stdout is defined
        - "'docker' not in ansible_groups.stdout"
    
    - name: Stop existing containers
      shell: |
        cd {{ deployment_dir }}/sports-data-service
        sudo docker-compose down 2>/dev/null || true
      ignore_errors: yes
      register: stop_result
    
    - name: Build and start containers
      shell: |
        cd {{ deployment_dir }}/sports-data-service
        export POSTGRES_PASSWORD="{{ vault_postgres_password }}"
        export API_PORT="{{ api_port }}"
        sudo -E docker-compose build --no-cache
        sudo -E docker-compose up -d
      environment:
        POSTGRES_PASSWORD: "{{ vault_postgres_password }}"
        API_PORT: "{{ api_port }}"
    
    - name: Wait for services to be healthy
      wait_for:
        host: localhost
        port: "{{ api_port }}"
        delay: 10
        timeout: 120
    
    - name: Initialize database (first time only)
      shell: |
        cd {{ deployment_dir }}/sports-data-service
        sudo docker-compose exec -T sports-service python scripts/update_schedules.py || true
      ignore_errors: yes
    
    - name: Create systemd service and timer files for environment
      template:
        src: "{{ item.src }}"
        dest: "/etc/systemd/system/{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop:
        - src: templates/sports-schedule-update.service.j2
          dest: "sports-schedule-update-{{ deployment_env }}.service"
        - src: templates/sports-schedule-update.timer.j2
          dest: "sports-schedule-update-{{ deployment_env }}.timer"
        - src: templates/sports-live-poller.service.j2
          dest: "sports-live-poller-{{ deployment_env }}.service"
        - src: templates/sports-live-poller.timer.j2
          dest: "sports-live-poller-{{ deployment_env }}.timer"
    
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
    
    - name: Enable and start schedule update timer
      systemd:
        name: "sports-schedule-update-{{ deployment_env }}.timer"
        enabled: yes
        state: started
    
    - name: Enable live poller service (oneshot, triggered by timer)
      systemd:
        name: "sports-live-poller-{{ deployment_env }}.service"
        enabled: yes
        state: stopped
    
    - name: Enable and start live poller timer
      systemd:
        name: "sports-live-poller-{{ deployment_env }}.timer"
        enabled: yes
        state: started
    
    - name: Show deployment summary
      debug:
        msg:
          - "Deployment completed successfully!"
          - "Environment: {{ deployment_env }}"
          - "Port: {{ api_port }}"
          - "Deployment directory: {{ deployment_dir }}"
          - "Backup location: {{ backup_dir }}/backup-{{ timestamp }}"
          - "Commit: {{ github_sha }}"

